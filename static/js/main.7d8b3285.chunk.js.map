{"version":3,"sources":["components/general/Input.js","components/JobForm.js","handleDates.js","components/Job.js","components/ResumeList.js","components/Experience.js","components/SchoolForm.js","components/School.js","components/Education.js","components/GeneralInfoForm.js","components/GeneralInfo.js","components/SkillsForm.js","components/Skills.js","Resume.js","Store.js","App.js","index.js"],"names":["Input","type","name","label","value","onChange","className","JobForm","props","data","title","company","dateStarted","dateEnded","responsibilities","state","handleInputChange","bind","handleSublistInputChange","handleRemoveSublistItem","handleSubmit","e","target","checked","this","setState","i","newResponsibilities","filter","r","index","placeholderText","preventDefault","onSubmit","onCancel","newForm","length","map","onClick","handleAddSublistItem","React","Component","defaultProps","formatDate","dateStr","a","split","date","Date","Intl","DateTimeFormat","format","Job","isEditing","onConfirmEdit","text","ResumeList","listId","dataHandler","ListItem","Placeholder","AddForm","dataList","actions","get","useState","editItem","setEditItem","isAddFormOpen","toggleAddForm","setAddForm","bool","child","id","set","onItemChange","console","log","x","delete","nanoid","add","Experience","jobs","SchoolForm","degree","school","gpa","School","Education","schools","GeneralInfoForm","firstName","lastName","contactInfo","handleContactInfoChange","prop","newContactInfo","Object","entries","item","key","GeneralInfo","setEditing","style","fontSize","phone","email","location","SkillsForm","skills","handleChange","handleAdd","handleRemove","s","j","placeholder","skill","Skills","newSkills","Resume","generalInfo","experience","education","Store","defaultData","request","Error","warn","undefined","action","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7d8b3285.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Input({ type, name, label, value, onChange }) {\n  return (\n    <label className=\"label\">\n      {label}\n      <input\n        className=\"input\"\n        type={type}\n        name={name}\n        value={value}\n        onChange={onChange}\n      />\n    </label>\n  );\n}\n\nexport default Input;\n","import React from \"react\";\nimport Input from \"./general/Input\";\n\n// TODO: create a generic Form component to handle things like\nclass JobForm extends React.Component {\n  constructor(props) {\n    super(props);\n    const {\n      title,\n      company,\n      dateStarted,\n      dateEnded,\n      responsibilities,\n    } = this.props.data;\n    this.state = {\n      title: title,\n      company: company,\n      dateStarted: dateStarted,\n      dateEnded: dateEnded,\n      responsibilities: responsibilities,\n    };\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSublistInputChange = this.handleSublistInputChange.bind(this);\n    this.handleRemoveSublistItem = this.handleRemoveSublistItem.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleInputChange(e) {\n    const target = e.target;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n\n    this.setState({ [target.name]: value });\n  }\n\n  handleSublistInputChange(e, i) {\n    const target = e.target;\n    const value = target.value;\n    const newResponsibilities = [...this.state.responsibilities];\n    newResponsibilities[i] = value;\n    this.setState({ responsibilities: newResponsibilities });\n  }\n\n  handleRemoveSublistItem(e, i) {\n    this.setState(({ responsibilities }) => ({\n      responsibilities: responsibilities.filter((r, index) => i !== index),\n    }));\n  }\n\n  handleAddSublistItem() {\n    const placeholderText = \"New responsibility\";\n    this.setState(({ responsibilities }) => ({\n      responsibilities: responsibilities\n        ? [...responsibilities, placeholderText]\n        : [placeholderText],\n    }));\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n\n    this.props.onSubmit(this.state);\n  }\n\n  render() {\n    const { onCancel, newForm } = this.props;\n    const {\n      title,\n      company,\n      dateStarted,\n      dateEnded,\n      responsibilities,\n    } = this.state;\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <Input\n          type=\"text\"\n          name=\"title\"\n          label=\"Title:\"\n          value={title}\n          onChange={this.handleInputChange}\n        />\n        <Input\n          type=\"text\"\n          name=\"company\"\n          label=\"Company:\"\n          value={company}\n          onChange={this.handleInputChange}\n        />\n        <Input\n          type=\"date\"\n          name=\"dateStarted\"\n          label=\"Date began:\"\n          value={dateStarted}\n          onChange={this.handleInputChange}\n        />\n        <Input\n          type=\"date\"\n          name=\"dateEnded\"\n          label=\"Date ended:\"\n          value={dateEnded}\n          onChange={this.handleInputChange}\n        />\n\n        <p>Responsibilities:</p>\n        <div className=\"sublist\">\n          {responsibilities && responsibilities.length > 0 ? (\n            responsibilities.map((r, i) => (\n              <div key={i}>\n                <Input\n                  type=\"text\"\n                  name={`responsibility-${i}`}\n                  label=\"\"\n                  value={r}\n                  onChange={(e) => this.handleSublistInputChange(e, i)}\n                />\n\n                <button\n                  type=\"button\"\n                  onClick={(e) => this.handleRemoveSublistItem(e, i)}\n                >\n                  Delete\n                </button>\n              </div>\n            ))\n          ) : (\n            <p className=\"text-placeholder\">\n              Add a responsibility/achievement!\n            </p>\n          )}\n\n          <button\n            type=\"button\"\n            onClick={() => {\n              this.handleAddSublistItem();\n            }}\n          >\n            Add Responsibility\n          </button>\n        </div>\n\n        <input type=\"submit\" value={newForm ? \"Add Job\" : \"Save changes\"} />\n        <button onClick={onCancel} type=\"button\">\n          Cancel\n        </button>\n      </form>\n    );\n  }\n}\n\nJobForm.defaultProps = {\n  data: {\n    title: \"Title\",\n    company: \"Company\",\n    // TODO: figure out better defaults, or handle null better\n    // possibly also: add \"present\" option to dateEnded?\n    dateStarted: \"2021-01-01\",\n    dateEnded: \"2021-01-01\",\n    responsibilities: [],\n  },\n};\n\nexport default JobForm;\n","export function formatDate(dateStr) {\n  const a = dateStr.split(\"-\");\n  // Of course months, and only months, are 0-indexed. That makes perfect sense.\n  const date = new Date(a[0], a[1] - 1, a[2]);\n  return Intl.DateTimeFormat().format(date);\n}\n","import React from \"react\";\nimport JobForm from \"./JobForm\";\nimport { formatDate } from \"../handleDates\";\n\n// TODO: move conditional rendering to ResumeList,\n// (this can just be the static render--possibly rename)\nconst Job = ({ data, isEditing, onConfirmEdit }) => {\n  const renderStatic = () => (\n    <div className=\"resume-section job\">\n      <div className=\"resume-section__main-content\">\n        <div className=\"left\">\n          <p>\n            <span className=\"text-bold\">{data.title}</span>\n            {\" | \"}\n            <span>{data.company}</span>\n          </p>\n        </div>\n        <div className=\"text-right\">\n          <p>{`${formatDate(data.dateStarted)} - ${formatDate(\n            data.dateEnded\n          )}`}</p>\n        </div>\n      </div>\n      {isEditing && <p className=\"text-placeholder\">Editing this one...</p>}\n      <ul className=\"resume-section__list--sublist\">\n        {data.responsibilities ? (\n          data.responsibilities.map((text, i) => (\n            <li className=\"resume-list-item\" key={i}>\n              {text}\n            </li>\n          ))\n        ) : (\n          <li className=\"resume-list-item text-placeholder\">\n            Edit to add a task\n          </li>\n        )}\n      </ul>\n    </div>\n  );\n\n  const renderForm = () => (\n    <JobForm\n      data={data}\n      onSubmit={onConfirmEdit}\n      // calling submit function with old data to cancel... really stupid, TODO: fix\n      onCancel={() => onConfirmEdit(data)}\n    />\n  );\n\n  return isEditing ? renderForm() : renderStatic();\n};\n\nexport default Job;\n","import { nanoid } from \"nanoid\";\nimport React, { useState } from \"react\";\nimport { actions } from \"../Store\";\n\nconst ResumeList = ({\n  className,\n  listId,\n  dataHandler,\n  ListItem,\n  Placeholder,\n  AddForm,\n}) => {\n  const dataList = dataHandler(actions.get, listId);\n\n  const [editItem, setEditItem] = useState(\"\");\n  const [isAddFormOpen, toggleAddForm] = useState(false);\n\n  const onDelete = (id) => {\n    console.log(`deleting ${id}`);\n    dataHandler(\n      actions.set,\n      listId,\n      dataList.filter((x) => x !== id)\n    );\n    dataHandler(actions.delete, id);\n  };\n\n  const onEdit = (id) => {\n    setEditItem(id);\n  };\n\n  const setAddForm = (bool) => {\n    toggleAddForm(bool);\n    setEditItem(\"\");\n  };\n\n  const addItem = (data) => {\n    console.log(data);\n    const id = nanoid(10);\n    dataHandler(actions.add, id, data);\n    dataHandler(actions.set, listId, [...dataList, id]);\n    toggleAddForm(false);\n  };\n\n  const onItemChange = (id, data) => {\n    dataHandler(actions.set, id, data);\n    setEditItem(\"\");\n  };\n\n  return (\n    <>\n      <ul className={`resume-section__list ${className}`}>\n        {dataList\n          ? dataList.map((child) => (\n              <li className=\"resume-list-item\" key={child}>\n                <ListItem\n                  data={dataHandler(actions.get, child)}\n                  isEditing={editItem === child}\n                  onConfirmEdit={(data) => onItemChange(child, data)}\n                />\n                {editItem === child ? (\n                  <button onClick={() => onDelete(child)}>delete</button>\n                ) : (\n                  <button onClick={() => onEdit(child)}>edit</button>\n                )}\n              </li>\n            ))\n          : Placeholder}\n      </ul>\n      {isAddFormOpen ? (\n        <AddForm\n          onSubmit={addItem}\n          onCancel={() => setAddForm(false)}\n          newForm={true}\n        />\n      ) : (\n        <button onClick={() => setAddForm(true)}>Add</button>\n      )}\n    </>\n  );\n};\n\nexport default ResumeList;\n","import React from \"react\";\nimport Job from \"./Job\";\nimport JobForm from \"./JobForm\";\nimport ResumeList from \"./ResumeList\";\n\nconst Experience = ({ data, dataHandler }) => {\n  return (\n    <section className=\"resume-section experience\">\n      <p className=\"resume-section__header\">Experience</p>\n      <ResumeList\n        className=\"no-indent\"\n        listId={data.jobs}\n        dataHandler={dataHandler}\n        ListItem={Job}\n        AddForm={JobForm}\n      />\n    </section>\n  );\n};\n\nexport default Experience;\n","import React from \"react\";\nimport Input from \"./general/Input\";\n\nclass SchoolForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const { degree, school, dateStarted, dateEnded, gpa } = this.props.data;\n\n    this.state = {\n      degree,\n      school,\n      dateStarted,\n      dateEnded,\n      gpa,\n    };\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleInputChange(e) {\n    const target = e.target;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n\n    this.setState({ [target.name]: value });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n\n    this.props.onSubmit(this.state);\n  }\n\n  render() {\n    const { onCancel, newForm } = this.props;\n    const { degree, school, dateStarted, dateEnded, gpa } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <Input\n          type=\"text\"\n          name=\"degree\"\n          label=\"Degree:\"\n          value={degree}\n          onChange={this.handleInputChange}\n        />\n        <Input\n          type=\"text\"\n          name=\"school\"\n          label=\"School:\"\n          value={school}\n          onChange={this.handleInputChange}\n        />\n        <Input\n          type=\"date\"\n          name=\"dateStarted\"\n          label=\"Date began:\"\n          value={dateStarted}\n          onChange={this.handleInputChange}\n        />\n        <Input\n          type=\"date\"\n          name=\"dateEnded\"\n          label=\"Date ended:\"\n          value={dateEnded}\n          onChange={this.handleInputChange}\n        />\n        <Input\n          type=\"number\"\n          name=\"gpa\"\n          label=\"GPA:\"\n          value={gpa}\n          onChange={this.handleInputChange}\n        />\n\n        <input type=\"submit\" value={newForm ? \"Add Job\" : \"Save changes\"} />\n        <button onClick={onCancel} type=\"button\">\n          Cancel\n        </button>\n      </form>\n    );\n  }\n}\n\nSchoolForm.defaultProps = {\n  data: {\n    degree: \"Degree\",\n    school: \"School\",\n    dateStarted: \"2021-01-01\",\n    dateEnded: \"2021-01-01\",\n    gpa: \"3.0\",\n  },\n};\n\nexport default SchoolForm;\n","import SchoolForm from \"./SchoolForm\";\n\nconst School = ({ data, isEditing, onConfirmEdit }) => {\n  const renderStatic = () => (\n    <div className=\"resume-section school\">\n      <div className=\"resume-section__main-content\">\n        <div className=\"text-left\">\n          <p>{data.degree}</p>\n          <p>{data.school}</p>\n        </div>\n        <div className=\"text-right\">\n          <p>{`${data.dateStarted} - ${data.dateEnded}`}</p>\n          <p>GPA: {data.gpa}</p>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderForm = () => (\n    <SchoolForm\n      data={data}\n      onSubmit={onConfirmEdit}\n      onCancel={() => onConfirmEdit(data)}\n    />\n  );\n\n  return isEditing ? renderForm() : renderStatic();\n};\n\nexport default School;\n","import ResumeList from \"./ResumeList\";\nimport School from \"./School\";\nimport SchoolForm from \"./SchoolForm\";\n\nconst Education = ({ data, dataHandler }) => {\n  return (\n    <section className=\"resume-section education\">\n      <p className=\"resume-section__header\">Education</p>\n      <ResumeList\n        className=\"no-indent\"\n        listId={data.schools}\n        dataHandler={dataHandler}\n        ListItem={School}\n        AddForm={SchoolForm}\n      />\n    </section>\n  );\n};\n\nexport default Education;\n","import React from \"react\";\nimport Input from \"./general/Input\";\n\nclass GeneralInfoForm extends React.Component {\n  constructor(props) {\n    super(props);\n    const { data } = this.props;\n    this.state = {\n      firstName: data.firstName,\n      lastName: data.lastName,\n      contactInfo: data.contactInfo,\n    };\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleContactInfoChange = this.handleContactInfoChange.bind(this);\n  }\n\n  handleInputChange(e) {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n\n  handleContactInfoChange(prop, value) {\n    const newContactInfo = { ...this.state.contactInfo };\n    newContactInfo[prop] = value;\n    this.setState({ contactInfo: newContactInfo });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    this.props.onSubmit(this.state);\n  }\n\n  render() {\n    const { firstName, lastName, contactInfo } = this.state;\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <Input\n          type=\"text\"\n          name=\"firstName\"\n          label=\"First Name:\"\n          value={firstName}\n          onChange={this.handleInputChange}\n        />\n        <Input\n          type=\"text\"\n          name=\"lastName\"\n          label=\"Last Name:\"\n          value={lastName}\n          onChange={this.handleInputChange}\n        />\n\n        {/* map array of [k,v] from contactInfo?? */}\n        <p>Contact Info:</p>\n        {Object.entries(contactInfo).map((item) => {\n          const [key, value] = item;\n          return (\n            <div key={key}>\n              <Input\n                type=\"text\"\n                name={key}\n                label={key}\n                value={value}\n                onChange={(e) =>\n                  this.handleContactInfoChange(key, e.target.value)\n                }\n              />\n            </div>\n          );\n        })}\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    );\n  }\n}\n\nexport default GeneralInfoForm;\n","import React, { useState } from \"react\";\nimport { actions } from \"../Store\";\nimport GeneralInfoForm from \"./GeneralInfoForm\";\n\nconst GeneralInfo = ({ data, dataHandler }) => {\n  const [isEditing, setEditing] = useState(false);\n\n  const onSubmit = (data) => {\n    dataHandler(actions.set, \"generalInfo\", data);\n    setEditing(false);\n  };\n\n  const renderStatic = () => (\n    <>\n      <div\n        className=\"resume-section__header text-center\"\n        style={{ fontSize: \"2.8rem\" }}\n      >\n        <span>{data.firstName}</span>{\" \"}\n        <span className=\"text-bold\"> {data.lastName}</span>\n      </div>\n      <ul className=\"resume-section__list resume-section__list--row flex-center no-indent\">\n        {data.contactInfo.phone && (\n          <li className=\"resume-list-item\" key=\"phone\">\n            phone: {data.contactInfo.phone}\n          </li>\n        )}\n        {data.contactInfo.email && (\n          <li className=\"resume-list-item\" key=\"email\">\n            email: {data.contactInfo.email}\n          </li>\n        )}\n        {data.contactInfo.location && (\n          <li className=\"resume-list-item\" key=\"location\">\n            location: {data.contactInfo.location}\n          </li>\n        )}\n      </ul>\n      <button type=\"button\" onClick={() => setEditing(true)}>\n        Edit\n      </button>\n    </>\n  );\n\n  const renderEditing = () => {\n    // no frickin clue how to handle this...\n    // -> contact info prob shouldn't be a list, since its a fixed set of unique values,\n    // { type: value, typeB: valueB } probably makes more sense\n    return (\n      <GeneralInfoForm\n        data={data}\n        contactInfo={data.contactInfo}\n        onSubmit={onSubmit}\n      />\n    );\n  };\n\n  return (\n    <section className=\"resume-section\">\n      {isEditing ? renderEditing() : renderStatic()}\n    </section>\n  );\n};\n\nexport default GeneralInfo;\n","import React from \"react\";\nimport Input from \"./general/Input\";\n\nclass SkillsForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { skills: this.props.data };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleAdd = this.handleAdd.bind(this);\n    this.handleRemove = this.handleRemove.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(e, i) {\n    this.setState(({ skills }) => ({\n      skills: skills.map((s, j) => (i === j ? e.target.value : s)),\n    }));\n  }\n\n  handleAdd() {\n    const placeholder = \"New skill\";\n    this.setState(({ skills }) => ({\n      skills: skills ? [...skills, placeholder] : [placeholder],\n    }));\n  }\n\n  handleRemove(i) {\n    this.setState(({ skills }) => ({\n      skills: skills.filter((s, j) => i !== j),\n    }));\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    this.props.onSubmit(this.state.skills);\n  }\n\n  render() {\n    const { skills } = this.state;\n\n    return (\n      <form>\n        {skills.map((skill, i) => (\n          <div key={i}>\n            <Input\n              type=\"text\"\n              name={`skill-${i}`}\n              label=\"\"\n              value={skill}\n              onChange={(e) => this.handleChange(e, i)}\n            />\n            <button type=\"button\" onClick={() => this.handleRemove(i)}>\n              &times;\n            </button>\n          </div>\n        ))}\n        <button type=\"button\" onClick={this.handleAdd}>\n          Add skill\n        </button>\n        <input type=\"submit\" onClick={this.handleSubmit} value=\"submit\" />\n      </form>\n    );\n  }\n}\n\nexport default SkillsForm;\n","import React, { useState } from \"react\";\nimport { actions } from \"../Store\";\nimport SkillsForm from \"./SkillsForm\";\n\nconst Skills = ({ data, dataHandler }) => {\n  const [isEditing, setEditing] = useState(false);\n\n  const onSubmit = (newSkills) => {\n    dataHandler(actions.set, \"skills\", newSkills);\n    setEditing(false);\n  };\n\n  const renderStatic = () => (\n    <>\n      <ul className=\"resume-section__list resume-section__list--grid\">\n        {data.map((skill, i) => (\n          <li className=\"resume-list-item\" key={i}>\n            {skill}\n          </li>\n        ))}\n      </ul>\n      <button onClick={() => setEditing(true)}>Edit</button>\n    </>\n  );\n\n  const renderForm = () => <SkillsForm data={data} onSubmit={onSubmit} />;\n\n  return (\n    <section className=\"resume-section skills\">\n      <p className=\"resume-section__header\">Skills</p>\n      {isEditing ? renderForm() : renderStatic()}\n    </section>\n  );\n};\n\nexport default Skills;\n","import React from \"react\";\nimport Experience from \"./components/Experience\";\nimport Education from \"./components/Education\";\nimport GeneralInfo from \"./components/GeneralInfo\";\nimport Skills from \"./components/Skills\";\nimport \"./styles/resume.css\";\nimport \"./styles/utilities.css\";\n\nconst Resume = ({ data, dataHandler }) => {\n  const { generalInfo, experience, education, skills } = data;\n  return (\n    <main className=\"resume\">\n      <GeneralInfo data={generalInfo} dataHandler={dataHandler} />\n      <Education data={education} dataHandler={dataHandler} />\n      <Experience data={experience} dataHandler={dataHandler} />\n      <Skills data={skills} dataHandler={dataHandler} />\n    </main>\n  );\n};\n\nexport default Resume;\n","import React from \"react\";\nimport defaultData from \"./demo-data-custom.json\";\nimport Resume from \"./Resume\";\n\nconst actions = {\n  add: \"ADD\",\n  get: \"GET\",\n  set: \"SET\",\n  delete: \"DELETE\",\n};\n\n// TODO: add localStorage\nclass Store extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = defaultData;\n    this.request = this.request.bind(this);\n  }\n\n  add(id, data) {\n    if (this.state[id]) {\n      throw new Error(\n        `Tried to create a new record at ${id}, but one already exists`\n      );\n    }\n\n    this.setState({ [id]: data });\n  }\n\n  get(id) {\n    if (!this.state[id]) {\n      console.warn(`Tried to get data with key ${id}, which does not exist`);\n      return null;\n    }\n\n    return this.state[id];\n  }\n\n  set(id, data) {\n    if (!this.state[id]) {\n      throw new Error(\n        `Tried to update record at ${id}, but record does not exist`\n      );\n    }\n\n    this.setState({ [id]: data });\n  }\n\n  delete(id) {\n    if (!this.state[id]) {\n      console.warn(`Tried to delete non-existent key ${id}`);\n      return null;\n    }\n\n    this.setState({ [id]: undefined });\n  }\n\n  request(action, id, data) {\n    switch (action) {\n      case actions.add:\n        return this.add(id, data);\n      case actions.get:\n        return this.get(id);\n      case actions.set:\n        return this.set(id, data);\n      case actions.delete:\n        return this.delete(id);\n      default:\n        throw new Error(`Unhandled action type ${action}`);\n    }\n  }\n\n  render() {\n    return <Resume data={this.state} dataHandler={this.request} />;\n  }\n}\n\nexport { actions };\nexport default Store;\n","import Store from \"./Store\";\n\nconst App = () => {\n  return <Store />;\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}